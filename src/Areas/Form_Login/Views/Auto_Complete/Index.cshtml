@{
    ViewBag.Title = "Login - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <script>
        // Invalidate the login fields with the given reason.
        var invalidateLogin = function(reason) {
            App.txtUsername.setValidation(reason);
            App.txtPassword.setValidation(reason);
            App.txtUsername.validate();
            App.txtPassword.validate();

            Ext.MessageBox.show({
                title: 'Authentication error',
                msg: reason,
                buttons: Ext.MessageBox.OK,
                animateTarget: 'Window1',
                icon: 'Error'
            });
        };
    </script>
}

@section example
{
    <h1>Logging with browser saving functionality</h1>
    <p>The valid login/password combination here would be:</p>
    <p>
        Username: Ext.NET<br>
        Password: extnet
    </p>
    <p>On successful authentication, you will be redirected to the Desktop example.</p>

    @(
        X.Window()
            .ID("Window1")
            .Closable(false)
            .Resizable(false)
            .Height(150)
            .Icon(Icon.Lock)
            .Title("Login")
            .Draggable(true)
            .Width(350)
            .Modal(false)
            .BodyPadding(5)
            .Layout(LayoutType.Form)
            .AutoEl(el =>
            {
                el.Tag = HtmlTextWriterTag.Form;
                el.CustomConfig.Add(new ConfigItem()
                {
                    Name = "method",
                    Value = "POST",
                    Mode = ParameterMode.Value
                });
                el.CustomConfig.Add(new ConfigItem()
                {
                    Name = "action",
                    Value = "about::blank",
                    Mode = ParameterMode.Value
                });
                el.CustomConfig.Add(new ConfigItem()
                {
                    Name = "target",
                    Value = "submitTarget",
                    Mode = ParameterMode.Value
                });
            })
            .Items(
                X.TextField()
                    .ID("txtUsername")
                    .Name("username")
                    .FieldLabel("Username")
                    .AllowBlank(false)
                    .BlankText("Your username is required")
                    .CustomConfig(ccf =>
                        ccf.Add(new ConfigItem()
                        {
                            Name = "inputAttrTpl",
                            Value = "['autocomplete=\"on\"']",
                            Mode = ParameterMode.Raw
                        })
                    ),
                X.TextField()
                    .ID("txtPassword")
                    .Name("password")
                    .InputType(Ext.Net.InputType.Password)
                    .FieldLabel("Password")
                    .AllowBlank(false)
                    .BlankText("Your password is required")
                    .CustomConfig(ccf =>
                        ccf.Add(new ConfigItem()
                        {
                            Name = "inputAttrTpl",
                            Value = "['autocomplete=\"on\"']",
                            Mode = ParameterMode.Raw
                        })
                    ),
                X.Component().Html("<iframe id='submitTarget' name='submitTarget' style='display:none'></iframe>"),
                X.Component().Html("<input type='submit' id='submitButton' style='display:none'  onclick=\"console.log('click click!');\" />")
            )
            .Buttons(
                X.Button()
                    .Text("Login")
                    .Icon(Icon.Accept)
                    .FormBind(true)
                    .Handler("Ext.getElementById('submitButton').click();")
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("Button1_Click");
                        de.Click.Success = "App.Window1.close();";
                        de.Click.Failure = "invalidateLogin(result.errorMessage);";
                        de.Click.ShowWarningOnFailure = false;
                        de.Click.EventMask.ShowMask = true;
                        de.Click.EventMask.Msg = "Verifying...";
                        de.Click.EventMask.MinDelay = 1000;

                        de.Click.ExtraParams.Add(new Parameter("user", "App.txtUsername.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("pass", "App.txtPassword.value", ParameterMode.Raw));
                    })
            )
    )
}